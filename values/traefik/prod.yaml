deployment:
  # Can be either Deployment or DaemonSet
  kind: DaemonSet

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Create a default IngressClass for Traefik
ingressClass:
  enabled: true
  isDefaultClass: true

# Create an IngressRoute for the dashboard
ingressRoute:
  dashboard:
    enabled: false

# https://github.com/argoproj/argo-cd/issues/1704
providers:
  kubernetesIngress:
    ingressClass: traefik
    publishedService:
      enabled: true

# Logs
# https://docs.traefik.io/observability/logs/
logs:
  # Traefik logs concern everything that happens to Traefik itself (startup, configuration, events, shutdown, and so on).
  general:
    # By default, the logs use a text format (common), but you can
    # also ask for the json format in the format option
    # format: json
    # By default, the level is set to ERROR. Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: WARN
  access:
    # To enable access logs
    enabled: true
    # By default, logs are written using the Common Log Format (CLF).
    # To write logs in JSON, use json in the format option.
    # If the given format is unsupported, the default (CLF) is used instead.
    format: json
    fields:
      headers:
        defaultmode: keep

metrics:
  prometheus:
    entryPoint: metrics

globalArguments: []

#
# Configure Traefik static configuration
# Additional arguments to be passed at Traefik's binary
# All available options available on https://docs.traefik.io/reference/static-configuration/cli/
## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
  - --entryPoints.websecure.forwardedHeaders.insecure
  - --api.dashboard=false
#  - "--providers.kubernetesingress.ingressclass=traefik-internal"
#  - "--log.level=DEBUG"


# Configure ports
ports:
  web: null
  websecure:
    tls:
      enabled: true

rollingUpdate:
  maxUnavailable: 0
  maxSurge: 1

service:
  spec:
    externalTrafficPolicy: Local


resources:
  requests:
    cpu: "100m"
    memory: "50Mi"
  limits:
    cpu: "500m"
    memory: "512Mi"


## Create HorizontalPodAutoscaler object.
## https://github.com/argoproj/argo-cd/issues/1079
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  metrics:
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: 80
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 30

priorityClassName: "system-cluster-critical"

tolerations:
  - key: "CriticalAddonsOnly"
    operator: "Exists"
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"

