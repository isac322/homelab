blocky:
  controller:
    type: daemonset

  image:
    # -- image repository
    repository: spx01/blocky
    # -- image tag
    tag: development
    # -- image pull policy
    pullPolicy: Always

  env:
    # -- Set the container timezone
    TZ: Asia/Seoul

  # -- Configures service settings for the chart.
  # @default -- See values.yaml
  service:
    main:
      ports:
        http:
          port: 4000
    dns-tcp:
      annotations:
        external-dns.alpha.kubernetes.io/hostname: dnsp.bhyoo.com
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
      enabled: true
      type: LoadBalancer
      externalTrafficPolicy: Local
      ports:
        dns-tcp:
          enabled: true
          port: 53
          protocol: TCP
          targetPort: 53
        dns-tls:
          enabled: true
          port: 853
          protocol: TCP
          targetPort: 853
    dns-udp:
      enabled: true
      type: LoadBalancer
      externalTrafficPolicy: Local
      ports:
        dns-udp:
          enabled: true
          port: 53
          protocol: UDP
          targetPort: 53

  # -- Configure persistence settings for the chart under this key.
  # @default -- See values.yaml
  persistence:
    logs:
      enabled: false
      mountPath: /logs
    cert:
      enabled: true
      mountPath: /app/cert
      readOnly: true
      type: custom
      volumeSpec:
        secret:
          secretName: blocky-custom-cert

  # -- Full list of options https://github.com/0xERR0R/blocky/blob/master/docs/config.yml
  # @default -- see URL to default config
  # language=YAML
  config: |
    upstream:
      # these external DNS resolvers will be used. Blocky picks 2 random resolvers from the list for each query
      # format for resolver: [net:]host:[port][/path]. net could be empty (default, shortcut for tcp+udp), tcp+udp, tcp, udp, tcp-tls or https (DoH). If port is empty, default port will be used (53 for udp and tcp, 853 for tcp-tls, 443 for https (Doh))
      externalResolvers:
        - tcp-tls:1.1.1.1
        - tcp-tls:1.0.0.1
        - tcp-tls:8.8.8.8

    # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
    blocking:
      # definition of blacklist groups. Can be external link (http/https) or local file
      blackLists:
        ads:
          - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
          - http://sysctl.org/cameleon/hosts
          - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
          - https://hosts.oisd.nl/
          - https://raw.githubusercontent.com/PolishFiltersTeam/KADhosts/master/KADhosts.txt
          - https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts
          - https://v.firebog.net/hosts/static/w3kbl.txt
          - https://adaway.org/hosts.txt
          - https://v.firebog.net/hosts/AdguardDNS.txt
          - https://v.firebog.net/hosts/Admiral.txt
          - https://raw.githubusercontent.com/anudeepND/blacklist/master/adservers.txt
          - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
          - https://v.firebog.net/hosts/Easylist.txt
          - https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext
          - https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts
          - https://raw.githubusercontent.com/bigdargon/hostsVN/master/hosts
          - https://v.firebog.net/hosts/Easyprivacy.txt
          - https://v.firebog.net/hosts/Prigent-Ads.txt
          - https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts
          - https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt
          - https://hostfiles.frogeye.fr/firstparty-trackers-hosts.txt
          - https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt
          - https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt
          - https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt
          - https://v.firebog.net/hosts/Prigent-Crypto.txt
          - https://bitbucket.org/ethanr/dns-blacklists/raw/8575c9f96e5b4a1308f2f12394abd86d0927a4a0/bad_lists/Mandiant_APT1_Report_Appendix_D.txt
          - https://phishing.army/download/phishing_army_blocklist_extended.txt
          - https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-malware.txt
          - https://raw.githubusercontent.com/Spam404/lists/master/main-blacklist.txt
          - https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts
          - https://urlhaus.abuse.ch/downloads/hostfile/
          - https://zerodot1.gitlab.io/CoinBlockerLists/hosts_browser
          - https://raw.githubusercontent.com/yous/YousList/master/hosts.txt
          - https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
        special:
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts
      # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
      whiteLists:
        ads:
          - https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/whitelist.txt
          - https://raw.githubusercontent.com/anudeepND/whitelist/master/domains/referral-sites.txt
          - |
            buzzvil.com
            buzzvil-internal.com
            codecov.io
      # definition: which groups should be applied for which client
      clientGroupsBlock:
        # default will be used, if no special definition for a client name exists
        default:
          - ads
          - special
      # which response will be sent, if query is blocked:
      # zeroIp: 0.0.0.0 will be returned (default)
      # nxDomain: return NXDOMAIN as return code
      # comma separated list of destination IP adresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the "blocked" page.
      blockType: zeroIp
      # optional: automatically list refresh period in minutes. Default: 4h.
      # Negative value -> deactivate automatically refresh.
      # 0 value -> use default
      refreshPeriod: 0
      downloadTimeout: 4m

    # optional: configuration for caching of DNS responses
    caching:
      # amount in minutes, how long a response must be cached (min value).
      # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
      # Default: 0
      minTime: 5
      # amount in minutes, how long a response must be cached (max value).
      # If <0, do not cache responses
      # If 0, use TTL
      # If > 0, use this value, if TTL is greater
      # Default: 0
      maxTime: 0
      # if true, will preload DNS results for often used queries (names queried more than 5 times in a 2 hour time window)
      # this improves the response time for often used queries, but significantly increases external traffic
      # default: false
      prefetching: true

    # optional: configuration for prometheus metrics endpoint
    prometheus:
      # enabled if true
      enable: true
      # url path, optional (default '/metrics')
      path: /metrics

    # optional: write query information (question, answer, client, duration etc) to daily csv file
    # queryLog:
    #   # directory (should be mounted as volume in docker)
    #   dir: /logs
    #   # if true, write one file per client. Writes all queries to single file otherwise
    #   perClient: true
    #   # if > 0, deletes log files which are older than ... days
    #   logRetentionDays: 7x

    # optional: DNS listener port and bind ip address, default 53 (UDP and TCP). Example: 53, :53, 127.0.0.1:53
    port: 53
    tlsPort: 853
    # optional: HTTP listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH ...
    httpPort: 4000
    # optional: HTTPS listener port, default 0 = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH...
    #httpsPort: 8443
    # mandatory, if https port > 0: path to cert and key file for SSL encryption
    certFile: /app/cert/tls.crt
    keyFile: /app/cert/tls.key
    # optional: use this DNS server to resolve blacklist urls and upstream DNS servers (DOH). Useful if no DNS resolver is configured and blocky needs to resolve a host name. Format net:IP:port, net must be udp or tcp
    bootstrapDns: tcp+udp:1.1.1.1
    # optional: Log level (one from debug, info, warn, error). Default: info
    logLevel: info
    # optional: Log format (text or json). Default: text
    logFormat: text

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "4000"

issuer:
  email: "bh322yoo@gmail.com"
#  server: "https://acme-staging-v02.api.letsencrypt.org/directory"
  domains:
    - dnsp.bhyoo.com
  organizations:
    - ByeonghoonYoo

sealedSecrets:
  cloudflareAPIToken: AgCC/2e3vwwVNHm4+/SDPKWaze/lWq2rCtpAQkentFWPX0x60AAV4B04WorB5QlcaAp3jw/Ys5vtxB5EoG395k1p+JFzArt6g+K358N9YE0LqMg/hTvY0Zdh8HbYa/0CMARR+RtPFHsrHPeMPu48V6ooVHp+5D2GAcJE/UOqcuepmjOzzG5MSTH/z8nmXAi0ci6aVjdAiFvg9CzIfN/GmvHg02jSkrsoyCkl/dcYCAccbzSFAOeOThf+C2rviBGSRG+BK2qunfcV+2ALLn7FAgBogODzqnOZdZbfHEIIUgjsI8Zi8pd3H96it853q5KnkvBuMP6be3ybWAU3b6rjynNk566SPnzX9Z3a+A5VhLsvPOLK/MhxkhPyw2IWBE/hTZyRohn3/RutiZ7QohdvGRIGdwInTGH1ZSKXYNw93pfEDpHKxY9x+Su4AL/84HaeLMaKJnOML04o507Z/Y10S1Lrvmk1Ge4LbHuReR1fx0qCfy7aVBJsHtDUyFK1D+2ALP9U17dXedNZi3msg6koeEjpJK2hq4U9GfQuthYTw2nDOnN0EJlGntujzu+8JK9Kq7MIinF/ifIz+mJ6KEbOS/YjhYy+y9gXpYWC6uVdh0nLbikpXt4WZOyqF+jBf+pU6YAspZ+G6mABFox++7reOCftVUCHS02+84vBmLZPzrNk8HvKujvF3vPMMve+H+wmgimrPNGOrqmEn960q9BdFhFIvyIWxpI+goe8HNvw2jmlEOYHCjq2L8na
