---
- hosts: prod
  name: Install cluster secrets on prod
  tasks:
    - name: Create shared secrets
      become: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: external-secrets-cluster-store-aws
            namespace: kube-system
            annotations:
              managed-by-ansible: 'true'
          type: Opaque
          stringData: "{{ lookup('cloud.terraform.tf_output', 'external_secrets_access_key', project_path='../1-provision/env/prod-vultr') | to_nice_yaml(indent=2) | from_yaml }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      when: is_k8s_master

- hosts: backbone
  name: Install cluster secrets on backbone
  tasks:
    - name: Create shared secrets
      become: yes
      run_once: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: external-secrets-cluster-store-aws
            namespace: kube-system
            annotations:
              managed-by-ansible: 'true'
          type: Opaque
          stringData: "{{ lookup('cloud.terraform.tf_output', 'external_secrets_access_key', project_path='../1-provision/env/backbone') | to_nice_yaml(indent=2) | from_yaml }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      when: is_k8s_master

- hosts: prod
  name: Create ServiceAccount for argocd in prod
  run_once: yes
  tasks:
    - name: Create ServiceAccount for argocd
      become: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: &saName argocd-manager
            namespace: kube-system
            annotations:
              managed-by-ansible: 'true'

    - name: Create token for argocd ServiceAccount
      become: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: &tokenName argocd-manager-token
            namespace: kube-system
            annotations:
              kubernetes.io/service-account.name: *saName
              managed-by-ansible: 'true'
          type: kubernetes.io/service-account-token

    - name: Create ClusterRole for argocd
      become: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: &roleName argocd-manager-role
            annotations:
              managed-by-ansible: 'true'
          rules:
            - apiGroups:
                - '*'
              resources:
                - '*'
              verbs:
                - '*'
            - nonResourceURLs:
                - '*'
              verbs:
                - '*'

    - name: Bind ClusterRole to argocd ServiceAccount
      become: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: argocd-manager-role-binding
            annotations:
              managed-by-ansible: 'true'
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: *roleName
          subjects:
            - kind: ServiceAccount
              name: *saName
              namespace: kube-system

    - name: Load Token
      become: yes
      kubernetes.core.k8s_info:
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        api_version: v1
        kind: Secret
        name: *tokenName
        namespace: kube-system
      register: _register_argocd_sa_token

    - name: Register secret body
      ansible.builtin.set_fact:
        _register_argocd_cluster_config: "{{
          {
            'tlsClientConfig': {
              'caData': _register_argocd_sa_token.resources.0.data['ca.crt'],
              'insecure': false
            },
            'bearerToken': _register_argocd_sa_token.resources.0.data.token | b64decode
          }
        }}"
        _register_prod_cluster_url: "https://{{ wireguard_ip }}:6443"
      delegate_to: "{{ item }}"
      delegate_facts: yes
      when: hostvars[item].is_k8s_master
      loop: "{{ groups.backbone }}"

- hosts: backbone
  name: Install argocd
  tasks:
    - name: install Helm
      ansible.builtin.import_role:
        name: gantsign.helm
      vars:
        helm_architecture: 'arm64'
      when: is_k8s_master

    - name: Create argocd namespace on backbone cluster
      become: yes
      run_once: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        name: argocd
        api_version: v1
        kind: Namespace
      when: is_k8s_master

    - name: Create Secret for prod cluster on backbone cluster
      become: yes
      run_once: yes
      kubernetes.core.k8s:
        state: present
        wait: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: cluster-prod
            annotations:
              managed-by-ansible: 'true'
            labels:
              argocd.argoproj.io/secret-type: cluster
            namespace: argocd
          stringData:
            name: prod
            server: "{{ _register_prod_cluster_url }}"
            config: "{{ _register_argocd_cluster_config | to_json }}"
      when: is_k8s_master

    - name: Copy value file
      run_once: yes
      ansible.builtin.copy:
        src: ../values/argo-cd/backbone.yaml
        dest: /tmp/argo-cd-values.yaml
      when: is_k8s_master

    - name: Install argocd
      become: yes
      run_once: yes
      kubernetes.core.helm:
        atomic: yes
        chart_ref: argo-cd
        chart_repo_url: https://argoproj.github.io/argo-helm
        chart_version: 5.36.2
        create_namespace: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        release_name: argocd
        release_namespace: argocd
        values_files:
          - /tmp/argo-cd-values.yaml
        wait: yes
      when: is_k8s_master

    - name: Copy value file
      run_once: yes
      ansible.builtin.copy:
        src: ../values/argocd-apps/backbone.yaml
        dest: /tmp/argocd-apps-values.yaml
      when: is_k8s_master

    - name: Install argocd-apps
      become: yes
      run_once: yes
      kubernetes.core.helm:
        atomic: yes
        chart_ref: argocd-apps
        chart_repo_url: https://argoproj.github.io/argo-helm
        chart_version: 1.4.1
        create_namespace: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        release_name: argocd-apps
        release_namespace: argocd
        values_files:
          - /tmp/argocd-apps-values.yaml
        wait: yes
      when: is_k8s_master
