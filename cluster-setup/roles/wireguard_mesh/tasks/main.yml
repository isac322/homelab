---
# Copyright (C) 2018-2022 Robert Wimmer
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Gather instance facts
  ansible.builtin.setup:

- name: Set facts
  run_once: true
  block:
    - name: Set site gateway
      ansible.builtin.set_fact:
        wireguard__register_site_gateways: "{{ hostvars
                                               |dict2items
                                               |selectattr('key', 'in', ansible_play_hosts_all)
                                               |selectattr('value.group_names', 'issuperset', [wireguard_site_group_name])
                                               |selectattr('value.wireguard_site_gateway', 'true')
                                               |map(attribute='key')
                                               |list
                                           }}"
    - name: Set points
      ansible.builtin.set_fact:
        wireguard__register_point_nodes: "{{ hostvars
                                             |dict2items
                                             |selectattr('key', 'in', ansible_play_hosts_all)
                                             |rejectattr('value.group_names', 'issuperset', [wireguard_site_group_name])
                                             |map(attribute='key')
                                             |list
                                         }}"
    - name: Set P2P nodes
      ansible.builtin.set_fact:
        wireguard__register_p2p_nodes: "{{ wireguard__register_point_nodes + wireguard__register_site_gateways }}"

- name: Include tasks depending on OS
  ansible.builtin.include_tasks:
    file: "{{ item }}"
    apply:
      tags:
        - wg-install
  with_first_found:
    - "setup-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
    - "setup-{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
    - "setup-{{ ansible_distribution|lower }}-{{ ansible_distribution_release }}.yml"
    - "setup-{{ ansible_distribution|lower }}.yml"
    - "setup-{{ ansible_os_family|lower }}.yml"
  tags:
    - wg-install

- name: Enable WireGuard kernel module
  community.general.modprobe:
    name: wireguard
    state: present
  register: wireguard__register_module_enabled
  until: wireguard__register_module_enabled is succeeded
  retries: 10
  delay: 10
  failed_when: wireguard__register_module_enabled is failure
  tags:
    - wg-install
  when: not ansible_os_family == 'Darwin'

- name: Creates wireguard directory
  ansible.builtin.file:
    path: /etc/wireguard
    state: directory
    mode: 0750
    owner: root
    group: systemd-network

########################## Private key ##########################

- name: Generate Wireguard private key
  block:
    - name: Get private key stat if exists
      ansible.builtin.stat:
        path: '/etc/wireguard/privatekey'
      register: wireguard__register_private_key_stat
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-generate-keys

    - name: Generate WireGuard private key
      ansible.builtin.command:
        cmd: "wg genkey"
      register: wireguard__register_private_key
      no_log: '{{ ansible_verbosity < 3 }}'
      when: not wireguard__register_private_key_stat.stat.exists
      tags:
        - wg-generate-keys

    - name: Write WireGuard private key
      ansible.builtin.copy:
        dest: "/etc/wireguard/privatekey"
        mode: 0640
        owner: root
        group: systemd-network
        content: '{{ wireguard__register_private_key.stdout }}'
      no_log: '{{ ansible_verbosity < 3 }}'
      when: not wireguard__register_private_key_stat.stat.exists
      tags:
        - wg-generate-keys

- name: Generate Wireguard private key of admin clients
  run_once: yes
  block:
    - name: Register if config/private key already exists on target host
      become: no
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ item }}.conf"
      register: wireguard__register_config_file_stat
      tags:
        - wg-generate-keys
        - wg-config
      with_items: "{{ wireguard_admin_clients }}"

    - name: Register config existency
      ansible.builtin.set_fact:
        wireguard__register_config_file_existency: "{{
                                                     wireguard__register_config_file_existency|default([])
                                                     + [{'client': item.item, 'exists': item.stat.exists}]
                                                   }}"
      with_items: "{{ wireguard__register_config_file_stat.results }}"

    - name: WireGuard private key handling for new keys
      block:
        - name: Generate WireGuard private key
          ansible.builtin.command: "wg genkey"
          register: wireguard__register_admin_client_private_key
          changed_when: false
          no_log: '{{ ansible_verbosity < 3 }}'
          tags:
            - wg-generate-keys
          when: not item.exists
          with_items: "{{ wireguard__register_config_file_existency }}"

        - name: Set private key fact
          ansible.builtin.set_fact:
            wireguard__register_admin_client_private_keys: "{{
                                                             wireguard__register_admin_client_private_keys|default({})
                                                             |combine({item.item.client: item.stdout})
                                                           }}"
          no_log: '{{ ansible_verbosity < 3 }}'
          tags:
            - wg-generate-keys
          when: not item.item.exists
          with_items: "{{ wireguard__register_admin_client_private_key.results }}"

    - name: WireGuard private key handling for existing keys
      block:
        - name: Read WireGuard config file
          become: no
          delegate_to: localhost
          ansible.builtin.slurp:
            src: "{{ item.client }}.conf"
          register: wireguard__register_config_file
          no_log: '{{ ansible_verbosity < 3 }}'
          tags:
            - wg-config
          when: item.exists
          with_items: "{{ wireguard__register_config_file_existency }}"

        - name: Set private key fact
          ansible.builtin.set_fact:
            wireguard__register_admin_client_private_keys: "{{
                                                             wireguard__register_admin_client_private_keys|default({})
                                                             |combine({item.item.client: item.content | b64decode | regex_findall('PrivateKey = (.*)') | first})
                                                           }}"
          no_log: '{{ ansible_verbosity < 3 }}'
          tags:
            - wg-config
          when: item.item.exists
          with_items: "{{ wireguard__register_config_file.results }}"

########################## Public key ##########################

- name: Derive WireGuard public key
  block:
    - name: Get public key stat if exists
      ansible.builtin.stat:
        path: '/etc/wireguard/publickey'
      register: wireguard__register_public_key_stat
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-generate-keys

    - name: Derive WireGuard public key
      ansible.builtin.shell:
        cmd: "wg pubkey < /etc/wireguard/privatekey"
      register: wireguard__register_public_key
      no_log: '{{ ansible_verbosity < 3 }}'
      when: not wireguard__register_public_key_stat.stat.exists
      tags:
        - wg-generate-keys

    - name: Write WireGuard public key
      ansible.builtin.copy:
        dest: "/etc/wireguard/publickey"
        mode: 0640
        owner: root
        group: systemd-network
        content: "{{ wireguard__register_public_key.stdout }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      when: not wireguard__register_public_key_stat.stat.exists
      tags:
        - wg-generate-keys

    - name: Read WireGuard public key
      ansible.builtin.command:
        cmd: "cat /etc/wireguard/publickey"
      register: wireguard__register_public_key
      no_log: '{{ ansible_verbosity < 3 }}'
      changed_when: false
      tags:
        - wg-generate-keys

    - name: Set WireGuard public key fact
      ansible.builtin.set_fact:
        wireguard__register_public_key: "{{ wireguard__register_public_key.stdout }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      tags:
        - wg-generate-keys

- name: Generate Wireguard public key for admin clients
  run_once: yes
  block:
    - name: Derive WireGuard public key
      ansible.builtin.command:
        cmd: "wg pubkey"
        stdin: "{{ wireguard__register_admin_client_private_keys[item] }}"
      register: wireguard_register_admin_client_public_key
      changed_when: false
      no_log: '{{ ansible_verbosity < 3 }}'
      with_items: "{{ wireguard_admin_clients.keys() }}"

    - name: Register public key fact
      ansible.builtin.set_fact:
        wireguard__register_admin_client_public_keys: "{{
                                                        wireguard__register_admin_client_public_keys|default({})
                                                        |combine({item.item: item.stdout})
                                                      }}"
      no_log: '{{ ansible_verbosity < 3 }}'
      with_items: "{{ wireguard_register_admin_client_public_key.results }}"

########################## Preshared key [P2P] ##########################

- name: Generate WireGuard Preshared keypair [P2P]
  when: inventory_hostname in wireguard__register_p2p_nodes
  no_log: '{{ ansible_verbosity < 3 }}'
  block:
    - name: Get Preshared keypair stat if exists
      ansible.builtin.stat:
        path: "/etc/wireguard/psk-{{ item }}"
      register: wireguard__register_preshared_key_stat
      when: inventory_hostname < item
      with_items: "{{ wireguard__register_p2p_nodes }}"
      tags:
        - wg-generate-keys

    - name: Generate WireGuard Preshared keypair
      ansible.builtin.command:
        cmd: "wg genpsk"
      register: wireguard__register_preshared_key
      when: item.skipped is not defined and not item.stat.exists
      with_items: "{{ wireguard__register_preshared_key_stat.results }}"
      tags:
        - wg-generate-keys

    - name: Write WireGuard Preshared keypair
      ansible.builtin.copy:
        dest: "/etc/wireguard/psk-{{ item.item.item }}"
        mode: 0640
        owner: root
        group: systemd-network
        content: "{{ item.stdout }}"
      when: item.skipped is not defined
      with_items: "{{ wireguard__register_preshared_key.results }}"
      tags:
        - wg-generate-keys

    - name: Read Preshared keypair
      ansible.builtin.slurp:
        src: "/etc/wireguard/psk-{{ item }}"
      register: wireguard__register_preshared_key
      changed_when: false
      when: inventory_hostname < item
      with_items: "{{ wireguard__register_p2p_nodes }}"
      tags:
        - wg-generate-keys

    - name: Massage preshared keys
      ansible.builtin.set_fact:
        wireguard__register_preshared_keys: "{{
                                              wireguard__register_preshared_keys|default({})
                                              |combine({item.item: item.content | b64decode})
                                            }}"
      changed_when: false
      when: item.skipped is not defined
      with_items: "{{ wireguard__register_preshared_key.results }}"
      tags:
        - wg-generate-keys

    - name: Propagate preshared keys
      ansible.builtin.copy:
        dest: "/etc/wireguard/psk-{{ item }}"
        mode: 0640
        owner: root
        group: systemd-network
        content: "{{ hostvars[item].wireguard__register_preshared_keys[inventory_hostname] }}"
      when: inventory_hostname > item
      with_items: "{{ wireguard__register_p2p_nodes }}"
      tags:
        - wg-generate-keys

########################## Preshared key [within site] ##########################

- name: Generate WireGuard Preshared keypair [within site]
  when: inventory_hostname in groups[wireguard_site_group_name]
  no_log: '{{ ansible_verbosity < 3 }}'
  block:
    - name: Get Preshared keypair stat if exists
      ansible.builtin.stat:
        path: "/etc/wireguard/psk-{{ item }}"
      register: wireguard__register_preshared_key_stat
      when: inventory_hostname < item
      with_items: "{{ groups[wireguard_site_group_name] }}"
      tags:
        - wg-generate-keys

    - name: Generate WireGuard Preshared keypair
      ansible.builtin.command:
        cmd: "wg genpsk"
      register: wireguard__register_preshared_key
      when: item.skipped is not defined and not item.stat.exists
      with_items: "{{ wireguard__register_preshared_key_stat.results }}"
      tags:
        - wg-generate-keys

    - name: Write WireGuard Preshared keypair
      ansible.builtin.copy:
        dest: "/etc/wireguard/psk-{{ item.item.item }}"
        mode: 0640
        owner: root
        group: systemd-network
        content: "{{ item.stdout }}"
      when: item.skipped is not defined
      with_items: "{{ wireguard__register_preshared_key.results }}"
      tags:
        - wg-generate-keys

    - name: Read Preshared keypair
      ansible.builtin.slurp:
        src: "/etc/wireguard/psk-{{ item }}"
      register: wireguard__register_preshared_key
      changed_when: false
      when: inventory_hostname < item
      with_items: "{{ groups[wireguard_site_group_name] }}"
      tags:
        - wg-generate-keys

    - name: Massage preshared keys
      ansible.builtin.set_fact:
        wireguard__register_preshared_keys: "{{
                                              wireguard__register_preshared_keys|default({})
                                              |combine({item.item: item.content | b64decode})
                                            }}"
      changed_when: false
      when: item.skipped is not defined
      with_items: "{{ wireguard__register_preshared_key.results }}"
      tags:
        - wg-generate-keys

    - name: Propagate preshared keys
      ansible.builtin.copy:
        dest: "/etc/wireguard/psk-{{ item }}"
        mode: 0640
        owner: root
        group: systemd-network
        content: "{{ hostvars[item].wireguard__register_preshared_keys[inventory_hostname] }}"
      when: inventory_hostname > item
      with_items: "{{ groups[wireguard_site_group_name] }}"
      tags:
        - wg-generate-keys

########################## Preshared key [admin client] ##########################

- name: Generate WireGuard Preshared keypair [admin client]
  when: (inventory_hostname in wireguard__register_p2p_nodes) or (inventory_hostname in groups[wireguard_site_group_name] and wireguard_site_gateway)
  no_log: '{{ ansible_verbosity < 3 }}'
  block:
    - name: Get Preshared keypair stat if exists
      ansible.builtin.stat:
        path: "/etc/wireguard/psk-{{ item }}"
      register: wireguard__register_clients_preshared_key_stat
      with_items: "{{ wireguard_admin_clients.keys() }}"
      tags:
        - wg-generate-keys

    - name: Generate WireGuard Preshared keypair
      ansible.builtin.command:
        cmd: "wg genpsk"
      register: wireguard__register_clients_preshared_key
      when: item.skipped is not defined and not item.stat.exists
      with_items: "{{ wireguard__register_clients_preshared_key_stat.results }}"
      tags:
        - wg-generate-keys

    - name: Write WireGuard Preshared keypair
      ansible.builtin.copy:
        dest: "/etc/wireguard/psk-{{ item.item.item }}"
        mode: 0640
        owner: root
        group: systemd-network
        content: "{{ item.stdout }}"
      when: item.skipped is not defined
      with_items: "{{ wireguard__register_clients_preshared_key.results }}"
      tags:
        - wg-generate-keys

    - name: Read Preshared keypair
      ansible.builtin.slurp:
        src: "/etc/wireguard/psk-{{ item }}"
      register: wireguard__register_clients_preshared_key
      changed_when: false
      with_items: "{{ wireguard_admin_clients.keys() }}"
      tags:
        - wg-generate-keys

    - name: Massage Preshared keypair
      ansible.builtin.set_fact:
        wireguard__register_client_psk: "{{
                                           wireguard__register_client_psk|default({})
                                           |combine( { item.item: item.content | b64decode } )
                                        }}"
      changed_when: false
      with_items: "{{ wireguard__register_clients_preshared_key.results }}"
      tags:
        - wg-generate-keys

########################## Render systemd-networkd configs ##########################

- name: Verify wireguard ip
  block:
    - name: Set CIDR fact
      ansible.builtin.set_fact:
        wireguard__register_cidr: "{{ wireguard_site_cidr if inventory_hostname in groups[wireguard_site_group_name] else wireguard_p2p_cidr }}"

    - name: Verify site group
      ansible.builtin.assert:
        that: wireguard__register_cidr | ansible.utils.network_in_usable(wireguard_ip)
        fail_msg: "{{ wireguard_ip }} is not usable in {{ wireguard__register_cidr }}"

- name: Set wireguard address fact
  ansible.builtin.set_fact:
    wireguard__register_address: "{{ (wireguard_ip + '/' + (wireguard_cidr | ansible.utils.ipaddr('netmask'))) | ansible.utils.ipaddr('address/prefix') }}"

- name: Set redering context [Peers]
  block:
    - name: Set context of points
      ansible.builtin.set_fact:
        wireguard__register_peers: "{{ (wireguard__register_peers|default([])) + [item] }}"
      when:
        - inventory_hostname not in groups[wireguard_site_group_name]
        - inventory_hostname != item
      with_items: "{{ wireguard__register_point_nodes }}"

    - name: Set context of site gateway
      ansible.builtin.set_fact:
        wireguard__register_peers: "{{ (wireguard__register_peers|default([])) + [item] }}"
      when:
        - inventory_hostname in groups[wireguard_site_group_name]
        - inventory_hostname != item
        - wireguard_site_gateway
      with_items: "{{ wireguard__register_p2p_nodes }}"

- name: Set redering context [Sites]
  block:
    - name: Set context of points
      ansible.builtin.set_fact:
        wireguard__register_sites: "{{ (wireguard__register_sites|default([])) + [item] }}"
      when:
        - inventory_hostname not in groups[wireguard_site_group_name]
        - inventory_hostname != item
      with_items: "{{ wireguard__register_point_nodes }}"

    - name: Set context of site peers
      ansible.builtin.set_fact:
        wireguard__register_peers: "{{ (wireguard__register_peers|default([])) + [item] }}"
      when:
        - inventory_hostname in groups[wireguard_site_group_name]
        - inventory_hostname != item
        - not wireguard_site_gateway
      with_items: "{{ groups[wireguard_site_group_name] }}"


- name: Setup wg0 device
  block:
    - name: Setup wg0 device of points
      ansible.builtin.template:
        src: ./templates/systemd-points.netdev
        dest: /etc/systemd/network/99-wg0.netdev
        owner: root
        group: systemd-network
        mode: 0640
      notify: systemd network restarted
      when: inventory_hostname in wireguard__register_point_nodes

    - name: Setup wg0 device of site gateway
      ansible.builtin.template:
        src: ./templates/systemd-site-gateway.netdev
        dest: /etc/systemd/network/99-wg0.netdev
        owner: root
        group: systemd-network
        mode: 0640
      notify: systemd network restarted
      when:
        - inventory_hostname in groups[wireguard_site_group_name]
        - wireguard_site_gateway

    - name: Setup wg0 device of site peers
      ansible.builtin.template:
        src: ./templates/systemd-site-peers.netdev
        dest: /etc/systemd/network/99-wg0.netdev
        owner: root
        group: systemd-network
        mode: 0640
      notify: systemd network restarted
      when:
        - inventory_hostname in groups[wireguard_site_group_name]
        - not wireguard_site_gateway

- name: Setup wg0 network
  ansible.builtin.template:
    src: ./templates/systemd.network
    dest: /etc/systemd/network/99-wg0.network
    owner: root
    group: systemd-network
    mode: 0640
  notify: systemd network restarted

- name: Save Wireguard conf of admin clients to local
  run_once: yes
  become: no
  ansible.builtin.template:
    src: ./templates/wg.conf.j2
    dest: "{{ item.key }}.conf"
  delegate_to: localhost
  with_items: "{{ wireguard_admin_clients|dict2items }}"
