- name: Create private key and CSR of admin
  become: '{{ local_become }}'
  block:
    - name: Create private key
      local_action:
        module: community.crypto.openssl_privatekey
        path: &privkey "{{ item }}.key"
        type: Ed25519
      no_log: '{{ ansible_verbosity < 3 }}'
      loop: '{{ __kubeconfig_register_admins }}'

    - name: Load private key
      local_action:
        module: ansible.builtin.slurp
        path: *privkey
      register: __kubeconfig_register_privkey_slurp
      no_log: '{{ ansible_verbosity < 3 }}'
      loop: '{{ __kubeconfig_register_admins }}'

    - name: Generate an OpenSSL Certificate Signing Request
      local_action:
        module: community.crypto.openssl_csr
        path: &csr "{{ item }}.csr"
        privatekey_path: *privkey
        common_name: "{{ item }}"
        organization_name: "{{ __kubeconfig_register_group_name }}"
      loop: '{{ __kubeconfig_register_admins }}'

    - name: Read Certificate Signing Request
      local_action:
        module: ansible.builtin.slurp
        path: *csr
      register: __kubeconfig_register_admin_csrs
      loop: '{{ __kubeconfig_register_admins }}'

- name: Submit Certificate Signing Request
  kubernetes.core.k8s:
    state: present
    wait: yes
    kubeconfig: '{{ kubeconfig_path }}'
    definition:
      apiVersion: certificates.k8s.io/v1
      kind: CertificateSigningRequest
      metadata:
        name: '{{ item.item }}'
        annotations:
          managed-by-ansible: 'true'
      spec:
        groups:
          - system:authenticated
        request: '{{ item.content }}'
        signerName: kubernetes.io/kube-apiserver-client
        usages:
          - digital signature
          - key encipherment
          - client auth
  no_log: '{{ ansible_verbosity < 3 }}'
  loop: "{{ __kubeconfig_register_admin_csrs.results }}"

- name: Approve Certificate Signing Request
  ansible.builtin.command:
    cmd: "kubectl certificate approve {{ item }}"
  changed_when: false
  loop: '{{ __kubeconfig_register_admins }}'

# Save kubeconfig onto local

- name: Massage privkey fact
  ansible.builtin.set_fact:
    __kubeconfig_register_privkey: "{{
      __kubeconfig_register_privkey | default({})
      | combine({item.item: item.content})
    }}"
  changed_when: false
  no_log: '{{ ansible_verbosity < 3 }}'
  loop: '{{ __kubeconfig_register_privkey_slurp.results }}'

- name: Load admin certificate
  kubernetes.core.k8s_info:
    wait: yes
    wait_condition:
      type: Approved
    kubeconfig: '{{ kubeconfig_path }}'
    api_version: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    name: '{{ item }}'
  register: _register_csr_info
  loop: '{{ __kubeconfig_register_admins }}'

- name: Massage admin certificate
  ansible.builtin.set_fact:
    __kubeconfig_register_cert: "{{
      __kubeconfig_register_cert | default({})
      | combine({item.item: item.resources.0.status.certificate})
    }}"
  changed_when: false
  no_log: '{{ ansible_verbosity < 3 }}'
  loop: "{{ _register_csr_info.results }}"

- name: Load kubeconfig
  block:
    - name: Read kubeconfig
      ansible.builtin.slurp:
        path: '{{ kubeconfig_path }}'
      register: __kubeconfig_register_config
    
    - name: Convert config
      ansible.builtin.set_fact:
        __kubeconfig_register_config: "{{ __kubeconfig_register_config['content'] | b64decode | from_yaml }}"
    
    - name: Modify config
      ansible.utils.update_fact:
        updates:
          - path: __kubeconfig_register_config.clusters.0.cluster.server
            value: "https://{{ api_server_host }}"
          - path: __kubeconfig_register_config.clusters.0.name
            value: "{{ cluster_name }}"
          - path: __kubeconfig_register_config.users.0.name
            value: "{{ item }}"
          - path: __kubeconfig_register_config.users.0.user.client-certificate-data
            value: "{{ __kubeconfig_register_cert[item] }}"
          - path: __kubeconfig_register_config.users.0.user.client-key-data
            value: "{{ __kubeconfig_register_privkey[item] }}"
          - path: __kubeconfig_register_config.contexts.0.name
            value: "{{ cluster_name }}"
          - path: __kubeconfig_register_config.contexts.0.context.cluster
            value: "{{ cluster_name }}"
          - path: __kubeconfig_register_config.contexts.0.context.user
            value: "{{ item }}"
          - path: __kubeconfig_register_config.current-context
            value: "{{ cluster_name }}"
          - path: __kubeconfig_register_config.contexts.0.context.namespace
            value: "{{ __kubeconfig_register_namespace if __kubeconfig_register_namespaced else '' }}"
      changed_when: false
      no_log: '{{ ansible_verbosity < 3 }}'
      register: __kubeconfig_register_updated
      loop: '{{ __kubeconfig_register_admins }}'

- name: Save kubeconfig to local
  become: '{{ local_become }}'
  local_action:
    module: copy
    content: "{{ item.__kubeconfig_register_config | to_nice_yaml(indent=2) }}"
    dest: "{{ local_kubeconfig_prefix }}{{ item.item }}.yaml"
  no_log: '{{ ansible_verbosity < 3 }}'
  loop: "{{ __kubeconfig_register_updated.results }}"
