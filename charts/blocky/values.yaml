# Default values for blocky.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: spx01/blocky
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

###########################################

#####
## Protocols

dns:
  # optional: DNS listener port(s) and bind ip address(es), default 53 (UDP and TCP). Example: 53, :53, "127.0.0.1:5353,[::1]:5353"
  port: 53
  service:
    enabled: true
    type: ClusterIP
    annotations: {}
    externalTrafficPolicy: ""


http:
  # optional: HTTPS listener port(s) and bind ip address(es), default empty = no http listener. If > 0, will be used for prometheus metrics, pprof, REST API, DoH... Example: 443, :443, 127.0.0.1:443
  port: 80
  service:
    enabled: true
    type: ClusterIP
    annotations: {}
    externalTrafficPolicy: ""
  ingress:
    enabled: false
    annotations: {}
    className: ""
    hosts: []
    tlsSecretName: ""

# DNS-over-TLS
dot:
  enabled: false
  port: 853
  service:
    enabled: false
    type: ClusterIP
    annotations: {}
    externalTrafficPolicy: ""
  # Ingress for RestAPI or debugging endpoint (exclude DNS-over-HTTPS)
  ingress:
    enabled: false

# DNS-over-HTTPS
doh:
  enabled: false
  # "app" or "ingress"
  tlsTerminationOn: app
  port: 443
  service:
    enabled: false
    type: ClusterIP
    annotations: {}
    externalTrafficPolicy: ""
  ingress:
    enabled: false
    annotations: {}
    className: ""
    hosts: []
    tlsSecretName: ""
  userAgent: ""

# optional: Minimal TLS version that the DoH and DoT server will use
minTlsServeVersion: 1.2

certificate:
  # "self-signed" or "cert-manager"
  type: self-signed
  # required if `type` is "cert-manager"
  spec: {}

#####
## upstream

upstreams:
  init:
    # The "init" is testing the given resolvers for each group. The potentially fatal error, depending on the strategy, is if a group has no functional resolvers. Default: blocking
    strategy: blocking

  # Blocky supports different upstream strategies (default `parallel_best`) that determine how and to which upstream DNS servers requests are forwarded.
  strategy: parallel_best

  # these external DNS resolvers will be used. Blocky picks 2 random resolvers from the list for each query
  # format for resolver: [net:]host:[port][/path]. net could be empty (default, shortcut for tcp+udp), tcp+udp, tcp, udp, tcp-tls or https (DoH). If port is empty, default port will be used (53 for udp and tcp, 853 for tcp-tls, 443 for https (Doh))
  # this configuration is mandatory, please define at least one external DNS resolver
  defaultUpstreams:
    - tcp-tls:1.1.1.1
    - tcp-tls:1.0.0.1
    - tcp-tls:8.8.8.8
    - tcp-tls:8.8.4.4

  # optional: use client name (with wildcard support: * - sequence of any characters, [0-9] - range)
  # or single ip address / client subnet as CIDR notation
  clientSpecificUpstreams: {}
    # laptop*:
    #   - 123.123.123.123

  # optional: timeout to query the upstream resolver. Default: 2s
  timeout: 2s

# optional: These DNS servers are used to resolve upstream DoH and DoT servers that are specified as host names, and list domains. It is useful if no system DNS resolver is configured, and/or to encrypt the bootstrap queries.
bootstrapDns:
  - upstream: tcp+udp:1.1.1.1

# optional: if path defined, use this file for query resolution (A, AAAA and rDNS). Default: empty
hostsFile:
  customize: false
  # optional: Host files (e.g. /etc/hosts on Linux)
  sources: []
  # optional: TTL, default: 1h
  hostsTTL: 1h
  # optional: Time between hosts file refresh, default: 1h
  refreshPeriod: 1h
  # optional: Whether loopback hosts addresses (127.0.0.0/8 and ::1) should be filtered or not, default: false
  filterLoopback: false
  loading:
    # optional: automatically list refresh period (in duration format). Default: 4h.
    # Negative value -> deactivate automatically refresh.
    # 0 value -> use default
    refreshPeriod: 4h
    # Configures how HTTP(S) sources are downloaded
    downloads:
      # optional: Download attempt timeout. Default: 5s
      timeout: 5s
      # optional: How many download attempts should be performed. Default: 3
      attempts: 3
      # optional: Time between the download attempts. Default: 500ms
      cooldown: 500ms
    # optional: This configures how Blocky startup works. The default strategy is blocking.. Default: blocking
    #  blocking -> all sources are loaded before DNS resolution starts
    #  failOnError -> like blocking but blocky will shut down if any source fails to load
    #  fast -> blocky starts serving DNS immediately and sources are loaded asynchronously. The features requiring the sources should enable soon after
    strategy: blocking
    # optional: Number of errors allowed when parsing a source before it is considered invalid and parsing stops. A value of -1 disables the limit. Default: 5
    maxErrorsPerSource: 5
    # optional: Blocky downloads and processes sources concurrently. This allows limiting how many can be processed in the same time. Larger values can reduce the overall list refresh time at the cost of using more RAM. Please consider reducing this value on systems with limited memory. Default value is 4.
    concurrency: 4

# optional: Determines how blocky will create outgoing connections. This impacts both upstreams, and lists. accepted: dual, v4, v6, default: dual
connectIPVersion: dual

#####
## DNS manipulation

# optional: custom IP address(es) for domain name (with all sub-domains). Multiple addresses must be separated by a comma
# example: query "printer.lan" or "my.printer.lan" will return 192.168.178.3
customDNS:
  customize: false
  customTTL: 1h
  # optional: if true (default), return empty result for unmapped query types (for example TXT, MX or AAAA if only IPv4 address is defined).
  # if false, queries with unmapped types will be forwarded to the upstream resolver
  filterUnmappedTypes: true
  # optional: replace domain in the query with other domain before resolver lookup in the mapping
  rewrite: {}
    # example.com: printer.lan
  mapping: {}
    # printer.lan: 192.168.178.3,2001:0db8:85a3:08d3:1319:8a2e:0370:7344
  # CNAME records are supported by utilizing the zone parameter. The zone file is a multiline string containing a DNS Zone File.
  zone: ""

# optional: definition, which DNS resolver(s) should be used for queries to the domain (with all sub-domains). Multiple resolvers must be separated by a comma
# Example: Query client.fritz.box will ask DNS server 192.168.178.1. This is necessary for local network, to resolve clients by host name
conditional:
  customize: false
  # optional: if false (default), return empty result if after rewrite, the mapped resolver returned an empty answer. If true, the original query will be sent to the upstream resolver
  # Example: The query "blog.example.com" will be rewritten to "blog.fritz.box" and also redirected to the resolver at 192.168.178.1. If not found and if `fallbackUpstream` was set to `true`, the original query "blog.example.com" will be sent upstream.
  # Usage: One usecase when having split DNS for internal and external (internet facing) users, but not all subdomains are listed in the internal domain.
  fallbackUpstream: false
  # optional: replace domain in the query with other domain before resolver lookup in the mapping
  rewrite: {}
    # example.com: fritz.box
  mapping: {}
    # fritz.box: 192.168.178.1
    # lan.net: 192.168.178.1,192.168.178.2

# optional: configuration of client name resolution
clientLookup:
  customize: false
  # optional: this DNS resolver will be used to perform reverse DNS lookup (typically local router)
  upstream: ""
  # optional: some routers return multiple names for client (host name and user defined name). Define which single name should be used.
  # Example: take second name if present, if not take first name
  singleNameOrder: []
    # - 2
    # - 1
  # optional: custom mapping of client name to IP addresses. Useful if reverse DNS does not work properly or just to have custom client names.
  clients: {}
    # laptop:
    #   - 192.168.178.29

#####
## DNS blocking

# optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
blocking:
  customize: false
  # definition of blacklist groups. Can be external link (http/https) or local file
  denylists: {}
    # ads:
    #   - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
    #   - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
    #   - http://sysctl.org/cameleon/hosts
    #   - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
    #   - |
    #     # inline definition with YAML literal block scalar style
    #     # hosts format
    #     someadsdomain.com
    # special:
    #   - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts
  # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
  allowlists: {}
    # ads:
    #   - whitelist.txt
    #   - |
    #     # inline definition with YAML literal block scalar style
    #     # hosts format
    #     whitelistdomain.com
    #     # this is a regex
    #     /^banners?[_.-]/
  # definition: which groups should be applied for which client
  clientGroupsBlock: {}
    # # default will be used, if no special definition for a client name exists
    # default:
    #   - ads
    #   - special
    # # use client name (with wildcard support: * - sequence of any characters, [0-9] - range)
    # # or single ip address / client subnet as CIDR notation
    # laptop*:
    #   - ads
    # 192.168.178.1/24:
    #   - special
  # which response will be sent, if query is blocked:
  # zeroIp: 0.0.0.0 will be returned (default)
  # nxDomain: return NXDOMAIN as return code
  # comma separated list of destination IP addresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the "blocked" page.
  blockType: zeroIp
  # optional: TTL for answers to blocked domains
  # default: 6h
  blockTTL: 6h
  loading:
    # optional: automatically list refresh period (in duration format). Default: 4h.
    # Negative value -> deactivate automatically refresh.
    # 0 value -> use default
    refreshPeriod: 4h
    # Configures how HTTP(S) sources are downloaded
    downloads:
      # optional: Download attempt timeout. Default: 5s
      timeout: 5s
      # optional: How many download attempts should be performed. Default: 3
      attempts: 3
      # optional: Time between the download attempts. Default: 500ms
      cooldown: 500ms
    # optional: This configures how Blocky startup works. The default strategy is blocking.. Default: blocking
    #  blocking -> all sources are loaded before DNS resolution starts
    #  failOnError -> like blocking but blocky will shut down if any source fails to load
    #  fast -> blocky starts serving DNS immediately and sources are loaded asynchronously. The features requiring the sources should enable soon after
    strategy: blocking
    # optional: Number of errors allowed when parsing a source before it is considered invalid and parsing stops. A value of -1 disables the limit. Default: 5
    maxErrorsPerSource: 5
    # optional: Blocky downloads and processes sources concurrently. This allows limiting how many can be processed in the same time. Larger values can reduce the overall list refresh time at the cost of using more RAM. Please consider reducing this value on systems with limited memory. Default value is 4.
    concurrency: 4

# optional: Under certain circumstances, it may be useful to filter some types of DNS queries. You can define one or more DNS query types, all queries with these types will be dropped (empty answer will be returned).
filtering:
  customize: false
  # optional: drop all queries with following query types. Default: empty
  queryTypes: []

# optional: In domain environments, it may be useful to only response to FQDN requests. If this option is enabled blocky respond immediately with NXDOMAIN if the request is not a valid FQDN. The request is therefore not further processed by other options like custom or conditional. Please be aware that by enabling it your hostname resolution will break unless every hostname is part of a domain.
fqdnOnly:
  enabled: false

#####
## DNS caching

# optional: configuration for caching of DNS responses
caching:
  customize: false
  # duration how long a response must be cached (min value).
  # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
  # Default: 0
  minTime: 0
  # duration how long a response must be cached (max value).
  # If <0, do not cache responses
  # If 0, use TTL
  # If > 0, use this value, if TTL is greater
  # Default: 0
  maxTime: 0
  # Max number of cache entries (responses) to be kept in cache (soft limit). Useful on systems with limited amount of RAM.
  # Default (0): unlimited
  maxItemsCount: 0
  # if true, will preload DNS results for often used queries (default: names queried more than 5 times in a 2-hour time window)
  # this improves the response time for often used queries, but significantly increases external traffic
  # default: false
  prefetching: false
  # prefetch track time window (in duration format)
  # default: 2h
  prefetchExpires: 2h
  # name queries threshold for prefetch
  # default: 5
  prefetchThreshold: 5
  # Max number of domains to be kept in cache for prefetching (soft limit). Useful on systems with limited amount of RAM.
  # Default (0): unlimited
  prefetchMaxItemsCount: 0
  # Time how long negative results (NXDOMAIN response or empty result) are cached. A value of -1 will disable caching for negative results.
  # Default: 30m
  cacheTimeNegative: 30m

#####
## logging

serverLog:
  # optional: Log level (one from debug, info, warn, error). Default: info
  level: info
  # optional: Log format (text or json). Default: text
  format: text
  # optional: log timestamps. Default: true
  timestamp: true
  # optional: obfuscate log output (replace all alphanumeric characters with *) for user sensitive data like request domains or responses to increase privacy. Default: false
  privacy: false


# optional: add EDE error codes to dns response
ede:
  # enabled if true, Default: false
  enable: false

# optional: EDNS Client Subnet (ECS)
ecs:
  # Use ECS information if it is present with a netmask is 32 for IPv4 or 128 for IPv6 as CientIP. Default: false
  useAsClient: false
  # Forward ECS option to upstream
  forward: false
  # Add ECS option for IPv4 requests if mask is greater than zero (max value 32)
  ipv4Mask: 0
  # Add ECS option for IPv6 requests if mask is greater than zero (max value 128)
  ipv6Mask: 0

# optional: write query information (question, answer, client, duration etc.) to daily csv file
queryLog:
  enabled: false
  # optional one of: mysql, postgresql, csv, csv-client. If empty, log to console
  type: mysql
  # FIXME: use secret
  # directory (should be mounted as volume in docker) for csv, db connection string for mysql/postgresql
  target: db_user:db_password@tcp(db_host_or_ip:3306)/db_name?charset=utf8mb4&parseTime=True&loc=Local
  #postgresql target: postgres://user:password@db_host_or_ip:5432/db_name
  # if > 0, deletes log files which are older than ... days
  logRetentionDays: 0
  # optional: Max attempts to create specific query log writer, default: 3
  creationAttempts: 3
  # optional: Time between the creation attempts, default: 2
  creationCooldown: 2
  # optional: which information should be logged, default: all
  fields: []
  # optional: Interval to write data in bulk to the external database
  flushInterval: 30s


# optional: export metrics to prometheus
prometheus:
  enabled: true
  # url path, optional (default '/metrics')
  path: /metrics
  serviceMonitor:
    enabled: false
    namespace: ""
    prometheusInstance: ""
    interval: 15s
    scrapeTimeout: 5s
    additionalLabels: {}
    annotations: {}
    honorLabels: false

# optional: SUDN (Special Use Domain Names) are always enabled as they are required by various RFCs.
# Some RFCs have optional recommendations, which are configurable as described below.
specialUseDomains:
  # Block TLDs listed in RFC 6762 Appendix G
  rfc6762_appendixG: true


#####
## redis

# optional: Blocky can synchronize its cache and blocking state between multiple instances through redis.
redis:
  enabled: false

  blocky:
    # Database, default: 0
    database: 0
    # Connection is required for blocky to start. Default: false
    required: false
    # Max connection attempts, default: 3
    connectionAttempts: 3
    # Time between the connection attempts, default: 1s
    connectionCooldown: 1s

  architecture: standalone
  auth:
    enabled: true
    password: ""


###########################################

updateStrategy:
  # -- Customize updateStrategy: RollingUpdate or OnDelete
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1

podAnnotations: {}

podSecurityContext:
  fsGroup: 65533

securityContext:
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 100

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
