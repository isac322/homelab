# Default values for registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

podDisruptionBudget:
  #  maxUnavailable: 1
  minAvailable: 1

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


sealedSecret:
  auth: ""
  haSharedSecret: ""
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  swift_user_name: ""
  swift_user_password: ""

# https://docs.docker.com/registry/recipes/mirror/
proxy:
  enabled: false
  remoteurl: https://registry-1.docker.io
  username: ""
  password: ""
  # the ref for a secret stored outside of this chart
  # Keys: proxyUsername, proxyPassword
  secretRef: ""


# set the type of filesystem to use: filesystem, s3, swift
storage:
  type: ""
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 20Gi
    existingClaim: ""
    storageClass: ""
  s3:
    ceph:
      enabled: false
      storageClass: ""
    encrypt: false
    secure: true
    v4auth: true
    # required if .Values.storage.s3.ceph.enabled is false
    bucket: ""
    # required if .Values.storage.s3.ceph.enabled is false
    regionEndpoint: ""
    # required if .Values.storage.s3.ceph.enabled is false
    region: ""
    # the ref for a secret stored outside of this chart
    # Keys: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
    secretRef: ""
  swift:
    authUrl: ""
    authVer: 3
    container: ""
    # the ref for a secret stored outside of this chart
    # Keys: swift_user_name, swift_user_password
    secretRef: ""

configData:
  version: 0.1
  auth:
    htpasswd:
      realm: basic-realm
      path: /auth/htpasswd
  http:
    addr: :5000
    headers:
      X-Content-Type-Options: [ nosniff ]
    http2:
      disabled: false
    relativeurls: true
  log:
    accesslog:
      disabled: false
  health:
    storagedriver:
      enabled: true
      interval: 10s
      threshold: 3
  storage:
    delete:
      enabled: true
    cache:
      blobdescriptor: inmemory


extraVolumeMounts: []
## Additional volumeMounts to the registry container.
#  - mountPath: /secret-data
#    name: cloudfront-pem-secret
#    readOnly: true

extraVolumes: []
## Additional volumes to the pod.
#  - name: cloudfront-pem-secret
#    secret:
#      secretName: cloudfront-credentials
#      items:
#        - key: cloudfront.pem
#          path: cloudfront.pem
#          mode: 511
