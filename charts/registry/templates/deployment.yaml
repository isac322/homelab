apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "registry.fullname" . }}
  labels:
    {{- include "registry.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- include "registry.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  minReadySeconds: 5
  template:
    metadata:
      labels:
      {{- include "registry.selectorLabels" . | nindent 8 }}
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command:
            - /bin/registry
          args:
            - serve
            - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: REGISTRY_HTTP_HOST
              value: https://registry.bhyoo.com
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "registry.fullname" . }}
                  key: haSharedSecret
            {{- if eq (required ".Values.storage.type is required" .Values.storage.type) "filesystem" }}
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
            {{- else if eq .Values.storage.type "s3" }}
            - name: REGISTRY_STORAGE_S3_ACCESSKEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.storage.s3.ceph.enabled }}
                  name: {{ include "registry.fullname" . }}-bucket
                  {{- else }}
                  name: {{ .Values.storage.s3.secretRef | default (include "registry.fullname" .) }}
                  {{- end }}
                  key: AWS_ACCESS_KEY_ID
            - name: REGISTRY_STORAGE_S3_SECRETKEY
              valueFrom:
                secretKeyRef:
                  {{- if .Values.storage.s3.ceph.enabled }}
                  name: {{ include "registry.fullname" . }}-bucket
                  {{- else }}
                  name: {{ .Values.storage.s3.secretRef | default (include "registry.fullname" .) }}
                  {{- end }}
                  key: AWS_SECRET_ACCESS_KEY
            - name: REGISTRY_STORAGE_S3_REGION
              {{- if .Values.storage.s3.ceph.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "registry.fullname" . }}-bucket
                  key: BUCKET_REGION
              {{- else }}
              value: {{ required ".Values.storage.s3.region is required unless ceph is enabled" .Values.storage.s3.region }}
              {{- end }}
            - name: REGISTRY_STORAGE_S3_REGIONENDPOINT
              {{- if .Values.storage.s3.ceph.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "registry.fullname" . }}-bucket
                  key: BUCKET_HOST
              {{- else }}
              value: {{ required ".Values.storage.s3.regionEndpoint is required unless ceph is enabled" .Values.storage.s3.regionEndpoint }}
              {{- end }}
            - name: REGISTRY_STORAGE_S3_BUCKET
              {{- if .Values.storage.s3.ceph.enabled }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "registry.fullname" . }}-bucket
                  key: BUCKET_NAME
              {{- else }}
              value: {{ required ".Values.storage.s3.bucket is required unless ceph is enabled" .Values.storage.s3.bucket }}
              {{- end }}
            - name: REGISTRY_STORAGE_S3_ENCRYPT
              value: {{ .Values.storage.s3.encrypt | quote }}
            - name: REGISTRY_STORAGE_S3_SECURE
              value: {{ .Values.storage.s3.secure | quote }}
            - name: REGISTRY_STORAGE_S3_V4AUTH
              value: {{ .Values.storage.s3.v4auth | quote }}
            {{- else if eq .Values.storage.type "swift" }}
            - name: REGISTRY_STORAGE_SWIFT_AUTHURL
              value: {{ required ".Values.storage.swift.authUrl is required" .Values.storage.swift.authUrl }}
            - name: REGISTRY_STORAGE_SWIFT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.storage.swift.secretRef | default (include "registry.fullname" .) }}
                  key: swift_user_name
            - name: REGISTRY_STORAGE_SWIFT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.storage.swift.secretRef | default (include "registry.fullname" .) }}
                  key: swift_user_password
            - name: REGISTRY_STORAGE_SWIFT_AUTHVERSION
              value: {{ .Values.storage.swift.authVer | quote }}
            - name: REGISTRY_STORAGE_SWIFT_CONTAINER
              value: {{ required ".Values.storage.swift.container is required" .Values.storage.swift.container }}
            {{- end }}
            {{- if .Values.proxy.enabled }}
            - name: REGISTRY_PROXY_REMOTEURL
              value: {{ required ".Values.proxy.remoteurl is required" .Values.proxy.remoteurl }}
            - name: REGISTRY_PROXY_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.proxy.secretRef }}{{ .Values.proxy.secretRef }}{{ else }}{{ template "registry.fullname" . }}{{ end }}
                  key: proxyUsername
            - name: REGISTRY_PROXY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.proxy.secretRef }}{{ .Values.proxy.secretRef }}{{ else }}{{ template "registry.fullname" . }}-secret{{ end }}
                  key: proxyPassword
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: "/etc/docker/registry"
              readOnly: true
            - name: auth
              mountPath: /auth
              readOnly: true
            {{- if eq .Values.storage.type "filesystem" }}
            - name: data
              mountPath: /var/lib/registry/
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "registry.fullname" . }}-config
        - name: auth
          secret:
            secretName: {{ include "registry.fullname" . }}
            items:
              - key: auth
                path: htpasswd
        {{- if eq .Values.storage.type "filesystem" }}
        - name: data
          {{- if .Values.storage.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.storage.persistence.existingClaim }}{{ .Values.storage.persistence.existingClaim }}{{- else }}{{ template "registry.fullname" . }}{{- end }}
          {{- else }}
          emptyDir: {}
          {{- end -}}
        {{- end }}
        {{- with .Values.extraVolumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
