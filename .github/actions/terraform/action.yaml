name: Terraform
description: Format & Lint & Plan & Apply Terraform
author: isac322

inputs:
  github-token:
    description: 'Github token'
    required: false
    default: ${{ github.token }}
  token:
    description: 'Terraform API token'
    required: true
  path:
    description: 'Path to terraform'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ inputs.token }}

    - name: Terraform Format
      id: fmt
      run: terraform -chdir=${{ inputs.path }} fmt -check
      shell: bash

    - name: Terraform Init
      id: init
      run: terraform -chdir=${{ inputs.path }} init
      shell: bash

    - name: Terraform Validate
      id: validate
      run: terraform -chdir=${{ inputs.path }} validate -no-color
      shell: bash

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform -chdir=${{ inputs.path }} plan -no-color -input=false
      shell: bash

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && (success() || failure())
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.path }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform -chdir=${{ inputs.path }} apply -auto-approve -input=false
      shell: bash

branding:
  icon: file-text
  color: white